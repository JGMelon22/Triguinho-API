// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Triguinho.Infrastructure.Data;

#nullable disable

namespace Triguinho.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922145259_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Triguinho.Core.Domains.Bets.Entities.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BetDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("BetDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("DepositValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("DepositValue");

                    b.Property<decimal>("Multiplier")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Multiplier");

                    b.Property<decimal>("PrizeValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("DECIMAL")
                        .HasDefaultValue(0m)
                        .HasColumnName("PrizeValue");

                    b.Property<int>("RoundId")
                        .HasColumnType("INT")
                        .HasColumnName("RoundId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("BetDate")
                        .HasDatabaseName("IDX_Bets_BetDate");

                    b.HasIndex("Id")
                        .HasDatabaseName("IDX_Bets_BetId");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("IDX_Bets_RoundId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IDX_Bets_Status");

                    b.ToTable("Bets", (string)null);
                });

            modelBuilder.Entity("Triguinho.Core.Domains.Games.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Rules");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IDX_Game_Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IDX_Game_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IDX_Game_Name");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("Triguinho.Core.Domains.Rounds.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("EndDate");

                    b.Property<int>("GameId")
                        .HasColumnType("INT")
                        .HasColumnName("GameId");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("INT")
                        .HasColumnName("SequenceNumber");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("IDX_Round_GameId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IDX_Round_Status");

                    b.HasIndex("GameId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("Rounds", (string)null);
                });

            modelBuilder.Entity("Triguinho.Core.Domains.Bets.Entities.Bet", b =>
                {
                    b.HasOne("Triguinho.Core.Domains.Rounds.Entities.Round", "Round")
                        .WithMany("Bets")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Triguinho.Core.Domains.Bets.ValueObjects.Guess", "GuessMade", b1 =>
                        {
                            b1.Property<int>("BetId")
                                .HasColumnType("int");

                            b1.Property<string>("BetType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("GuessTypeBet");

                            b1.Property<int>("ChosenValue")
                                .HasColumnType("int")
                                .HasColumnName("GuessValueChosen");

                            b1.HasKey("BetId");

                            b1.ToTable("Bets");

                            b1.WithOwner()
                                .HasForeignKey("BetId");
                        });

                    b.Navigation("GuessMade")
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Triguinho.Core.Domains.Rounds.Entities.Round", b =>
                {
                    b.HasOne("Triguinho.Core.Domains.Games.Entities.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Triguinho.Core.Domains.Rounds.ValueObjects.Result", "GeneratedResult", b1 =>
                        {
                            b1.Property<int>("RoundId")
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("ResultDescription");

                            b1.Property<int>("DrawnValue")
                                .HasColumnType("int")
                                .HasColumnName("ResultDrawnAmount");

                            b1.Property<DateTime>("GenerationMoment")
                                .HasColumnType("datetime2")
                                .HasColumnName("ResultGenerationMoment");

                            b1.HasKey("RoundId");

                            b1.ToTable("Rounds");

                            b1.WithOwner()
                                .HasForeignKey("RoundId");
                        });

                    b.Navigation("Game");

                    b.Navigation("GeneratedResult");
                });

            modelBuilder.Entity("Triguinho.Core.Domains.Games.Entities.Game", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Triguinho.Core.Domains.Rounds.Entities.Round", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
